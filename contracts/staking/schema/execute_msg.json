{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "add_validator"
      ],
      "properties": {
        "add_validator": {
          "type": "object",
          "required": [
            "val_addr"
          ],
          "properties": {
            "val_addr": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_validator"
      ],
      "properties": {
        "remove_validator": {
          "type": "object",
          "required": [
            "redel_addr",
            "val_addr"
          ],
          "properties": {
            "redel_addr": {
              "$ref": "#/definitions/Addr"
            },
            "val_addr": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "rebalance_pool"
      ],
      "properties": {
        "rebalance_pool": {
          "type": "object",
          "required": [
            "amount",
            "redel_addr",
            "val_addr"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "redel_addr": {
              "$ref": "#/definitions/Addr"
            },
            "val_addr": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "deposit"
      ],
      "properties": {
        "deposit": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "redeem_rewards"
      ],
      "properties": {
        "redeem_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "swap"
      ],
      "properties": {
        "swap": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "reimburse_slashing"
      ],
      "properties": {
        "reimburse_slashing": {
          "type": "object",
          "required": [
            "val_addr"
          ],
          "properties": {
            "val_addr": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "reinvest"
      ],
      "properties": {
        "reinvest": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "undelegate"
      ],
      "properties": {
        "undelegate": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "reconcile_funds"
      ],
      "properties": {
        "reconcile_funds": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw_funds_to_wallet"
      ],
      "properties": {
        "withdraw_funds_to_wallet": {
          "type": "object",
          "required": [
            "batch_id"
          ],
          "properties": {
            "batch_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_airdrops"
      ],
      "properties": {
        "claim_airdrops": {
          "type": "object",
          "required": [
            "rates"
          ],
          "properties": {
            "rates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AirdropRate"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "config_request"
          ],
          "properties": {
            "config_request": {
              "$ref": "#/definitions/ConfigUpdateRequest"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_operation_flags"
      ],
      "properties": {
        "update_operation_flags": {
          "type": "object",
          "required": [
            "operation_controls_update_request"
          ],
          "properties": {
            "operation_controls_update_request": {
              "$ref": "#/definitions/OperationControlsUpdateRequest"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_manager"
      ],
      "properties": {
        "set_manager": {
          "type": "object",
          "required": [
            "manager"
          ],
          "properties": {
            "manager": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "accept_manager"
      ],
      "properties": {
        "accept_manager": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AirdropRate": {
      "type": "object",
      "required": [
        "amount",
        "denom",
        "proof",
        "stage"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        },
        "proof": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stage": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "ConfigUpdateRequest": {
      "type": "object",
      "properties": {
        "airdrop_registry_contract": {
          "type": [
            "string",
            "null"
          ]
        },
        "cw20_token_contract": {
          "type": [
            "string",
            "null"
          ]
        },
        "max_deposit": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "min_deposit": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "protocol_deposit_fee": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "protocol_reward_fee": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "protocol_withdraw_fee": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "reinvest_cooldown": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "swap_cooldown": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "unbonding_period": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "undelegation_cooldown": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "OperationControlsUpdateRequest": {
      "type": "object",
      "properties": {
        "claim_airdrops_paused": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "deposit_paused": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "queue_undelegate_paused": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "reconcile_paused": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "redeem_rewards_paused": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "reimburse_slashing_paused": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "reinvest_paused": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "swap_paused": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "undelegate_paused": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "withdraw_paused": {
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
